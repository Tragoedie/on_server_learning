import unittest
from on_server_learning.algorithms_1.trees.BST import *
import collections


class Test_SimpleTree(unittest.TestCase):

    def test_add_and_find(self):
        tree = BST(None)
        tree.AddKeyValue(10, 10)
        self.assertEqual(tree.Count(), 1)
        self.assertEqual(tree.Root.NodeValue, 10)  # Проверка добавления Root
        child_1 = (4, 4)
        tree.AddKeyValue(child_1[0], child_1[1])
        self.assertEqual(tree.Count(), 2)
        self.assertEqual(tree.Root.LeftChild.NodeKey, 4)  # Проверка значения LeftChild
        child_2 = (12, 12)
        tree.AddKeyValue(child_2[0], child_2[1])
        self.assertEqual(tree.Count(), 3)
        self.assertEqual(tree.Root.RightChild.NodeKey, 12)  # Проверка значения RightChild
        self.assertTrue(tree.FindNodeByKey(12).NodeHasKey)  # Поиск существующего ключа
        self.assertFalse(tree.FindNodeByKey(11).NodeHasKey)  # Поиск несуществующего ключа
        self.assertTrue(tree.FindNodeByKey(11).ToLeft)  # Проверка, что несуществующий ключ -> левый потомок
        self.assertFalse(tree.AddKeyValue(12, 12))  # Добавление существующего ключа, return False
        tree.AddKeyValue(11, 11)
        self.assertEqual(tree.Root.RightChild.LeftChild.NodeKey, 11)  # Проверка, что несуществующий ключ записан

    def test_FinMinMax(self):
        tree = BST(None)
        Child_1 = (10, 10)
        Child_2 = (4, 4)
        Child_3 = (2, 2)
        Child_4 = (6, 6)
        Child_5 = (20, 20)
        Child_6 = (14, 14)
        Child_7 = (12, 12)
        Child_8 = (17, 17)
        Child_9 = (18, 18)
        Child_10 = (25, 25)
        Child_11 = (23, 23)
        Child_12 = (22, 22)
        Child_13 = (24, 24)
        Child_14 = (28, 28)
        tree.AddKeyValue(Child_1[0], Child_1[1])
        tree.AddKeyValue(Child_2[0], Child_2[1])
        tree.AddKeyValue(Child_3[0], Child_3[1])
        tree.AddKeyValue(Child_4[0], Child_4[1])
        tree.AddKeyValue(Child_5[0], Child_5[1])
        tree.AddKeyValue(Child_6[0], Child_6[1])
        tree.AddKeyValue(Child_7[0], Child_7[1])
        tree.AddKeyValue(Child_8[0], Child_8[1])
        tree.AddKeyValue(Child_9[0], Child_9[1])
        tree.AddKeyValue(Child_10[0], Child_10[1])
        tree.AddKeyValue(Child_11[0], Child_11[1])
        tree.AddKeyValue(Child_12[0], Child_12[1])
        tree.AddKeyValue(Child_13[0], Child_13[1])
        tree.AddKeyValue(Child_14[0], Child_14[1])
        self.assertEqual(tree.FinMinMax(tree.Root, False).NodeValue, 2)
        self.assertEqual(tree.FinMinMax(tree.Root, True).NodeValue, 28)
        self.assertEqual(tree.FinMinMax(tree.Root.LeftChild, False).NodeValue, 2)
        self.assertEqual(tree.FinMinMax(tree.Root.LeftChild, True).NodeValue, 6)
        self.assertEqual(tree.FinMinMax(tree.Root.RightChild, False).NodeValue, 12)
        self.assertEqual(tree.FinMinMax(tree.Root.RightChild, True).NodeValue, 28)

    def test_del_root_with_RightChild(self):
        tree = BST(None)
        Child_1 = (10, 10)
        Child_2 = (4, 4)
        Child_3 = (2, 2)
        Child_4 = (6, 6)
        Child_5 = (20, 20)
        Child_6 = (14, 14)
        Child_7 = (12, 12)
        Child_8 = (17, 17)
        Child_9 = (18, 18)
        Child_10 = (25, 25)
        Child_11 = (23, 23)
        Child_12 = (22, 22)
        Child_13 = (24, 24)
        Child_14 = (28, 28)
        Child_15 = (13, 13)
        tree.AddKeyValue(Child_1[0], Child_1[1])
        tree.AddKeyValue(Child_2[0], Child_2[1])
        tree.AddKeyValue(Child_3[0], Child_3[1])
        tree.AddKeyValue(Child_4[0], Child_4[1])
        tree.AddKeyValue(Child_5[0], Child_5[1])
        tree.AddKeyValue(Child_6[0], Child_6[1])
        tree.AddKeyValue(Child_7[0], Child_7[1])
        tree.AddKeyValue(Child_8[0], Child_8[1])
        tree.AddKeyValue(Child_9[0], Child_9[1])
        tree.AddKeyValue(Child_10[0], Child_10[1])
        tree.AddKeyValue(Child_11[0], Child_11[1])
        tree.AddKeyValue(Child_12[0], Child_12[1])
        tree.AddKeyValue(Child_13[0], Child_13[1])
        tree.AddKeyValue(Child_14[0], Child_14[1])
        tree.AddKeyValue(Child_15[0], Child_15[1])
        self.assertEqual(tree.DeleteNodeByKey(10), True)
        self.assertEqual(tree.Root.RightChild.NodeValue, 20)
        self.assertEqual(tree.Root.RightChild.LeftChild.NodeValue, 14)
        self.assertEqual(tree.Root.RightChild.LeftChild.LeftChild.NodeValue, 13)
        self.assertEqual(tree.Root.NodeValue, 12)
        self.assertEqual(tree.Root.LeftChild.NodeValue, 4)
        self.assertFalse(tree.FindNodeByKey(10).NodeHasKey)

    def test_del_root(self):
        tree = BST(None)
        Child_1 = (10, 10)
        Child_2 = (4, 4)
        Child_3 = (2, 2)
        Child_4 = (6, 6)
        Child_5 = (20, 20)
        Child_6 = (14, 14)
        Child_7 = (12, 12)
        Child_8 = (17, 17)
        Child_9 = (18, 18)
        Child_10 = (25, 25)
        Child_11 = (23, 23)
        Child_12 = (22, 22)
        Child_13 = (24, 24)
        Child_14 = (28, 28)
        tree.AddKeyValue(Child_1[0], Child_1[1])
        tree.AddKeyValue(Child_2[0], Child_2[1])
        tree.AddKeyValue(Child_3[0], Child_3[1])
        tree.AddKeyValue(Child_4[0], Child_4[1])
        tree.AddKeyValue(Child_5[0], Child_5[1])
        tree.AddKeyValue(Child_6[0], Child_6[1])
        tree.AddKeyValue(Child_7[0], Child_7[1])
        tree.AddKeyValue(Child_8[0], Child_8[1])
        tree.AddKeyValue(Child_9[0], Child_9[1])
        tree.AddKeyValue(Child_10[0], Child_10[1])
        tree.AddKeyValue(Child_11[0], Child_11[1])
        tree.AddKeyValue(Child_12[0], Child_12[1])
        tree.AddKeyValue(Child_13[0], Child_13[1])
        tree.AddKeyValue(Child_14[0], Child_14[1])
        self.assertEqual(tree.DeleteNodeByKey(10), True)
        self.assertEqual(tree.Root.RightChild.NodeValue, 20)
        self.assertEqual(tree.Root.RightChild.LeftChild.NodeValue, 14)
        self.assertEqual(tree.Root.NodeValue, 12)
        self.assertEqual(tree.Root.LeftChild.NodeValue, 4)
        self.assertFalse(tree.FindNodeByKey(10).NodeHasKey)

    def test_del_one_root(self):
        tree = BST(None)
        Child_1 = (10, 10)
        tree.AddKeyValue(Child_1[0], Child_1[1])
        self.assertEqual(tree.DeleteNodeByKey(10), True)
        self.assertEqual(tree.Root, None)

    def test_del_RightChild(self):
        tree = BST(None)
        Child_1 = (10, 10)
        Child_2 = (4, 4)
        Child_3 = (2, 2)
        Child_4 = (6, 6)
        Child_5 = (20, 20)
        Child_6 = (14, 14)
        Child_7 = (12, 12)
        Child_8 = (17, 17)
        Child_9 = (18, 18)
        Child_10 = (25, 25)
        Child_11 = (23, 23)
        Child_12 = (22, 22)
        Child_13 = (24, 24)
        Child_14 = (28, 28)
        tree.AddKeyValue(Child_1[0], Child_1[1])
        tree.AddKeyValue(Child_2[0], Child_2[1])
        tree.AddKeyValue(Child_3[0], Child_3[1])
        tree.AddKeyValue(Child_4[0], Child_4[1])
        tree.AddKeyValue(Child_5[0], Child_5[1])
        tree.AddKeyValue(Child_6[0], Child_6[1])
        tree.AddKeyValue(Child_7[0], Child_7[1])
        tree.AddKeyValue(Child_8[0], Child_8[1])
        tree.AddKeyValue(Child_9[0], Child_9[1])
        tree.AddKeyValue(Child_10[0], Child_10[1])
        tree.AddKeyValue(Child_11[0], Child_11[1])
        tree.AddKeyValue(Child_12[0], Child_12[1])
        tree.AddKeyValue(Child_13[0], Child_13[1])
        tree.AddKeyValue(Child_14[0], Child_14[1])
        self.assertEqual(tree.DeleteNodeByKey(20), True)
        self.assertEqual(tree.Root.RightChild.NodeValue, 22)
        self.assertEqual(tree.Root.RightChild.RightChild.NodeValue, 25)
        self.assertEqual(tree.Root.RightChild.LeftChild.NodeValue, 14)
        self.assertFalse(tree.FindNodeByKey(20).NodeHasKey)

    def test_del_RightChild_without_left(self):
        tree = BST(None)
        Child_1 = (10, 10)
        Child_5 = (20, 20)
        Child_10 = (25, 25)
        Child_11 = (23, 23)
        Child_12 = (22, 22)
        Child_13 = (24, 24)
        Child_14 = (28, 28)
        tree.AddKeyValue(Child_1[0], Child_1[1])
        tree.AddKeyValue(Child_5[0], Child_5[1])
        tree.AddKeyValue(Child_10[0], Child_10[1])
        tree.AddKeyValue(Child_11[0], Child_11[1])
        tree.AddKeyValue(Child_12[0], Child_12[1])
        tree.AddKeyValue(Child_13[0], Child_13[1])
        tree.AddKeyValue(Child_14[0], Child_14[1])
        self.assertEqual(tree.DeleteNodeByKey(20), True)
        self.assertEqual(tree.Root.RightChild.NodeValue, 25)
        self.assertEqual(tree.Root.RightChild.RightChild.NodeValue, 28)
        self.assertEqual(tree.Root.RightChild.LeftChild.NodeValue, 23)
        self.assertFalse(tree.FindNodeByKey(20).NodeHasKey)

    def test_del_LeftChild_without_right(self):
        tree = BST(None)
        Child_1 = (10, 10)
        Child_2 = (4, 4)
        Child_3 = (2, 2)
        tree.AddKeyValue(Child_1[0], Child_1[1])
        tree.AddKeyValue(Child_2[0], Child_2[1])
        tree.AddKeyValue(Child_3[0], Child_3[1])
        self.assertEqual(tree.DeleteNodeByKey(4), True)
        self.assertEqual(tree.Root.LeftChild.NodeValue, 2)
        self.assertEqual(tree.Root.LeftChild.LeftChild, None)
        self.assertEqual(tree.Root.LeftChild.RightChild, None)
        self.assertFalse(tree.FindNodeByKey(4).NodeHasKey)

    def test_del_LeftChild_without_all(self):
        tree = BST(None)
        Child_1 = (10, 10)
        Child_2 = (4, 4)
        Child_3 = (2, 2)
        tree.AddKeyValue(Child_1[0], Child_1[1])
        tree.AddKeyValue(Child_2[0], Child_2[1])
        tree.AddKeyValue(Child_3[0], Child_3[1])
        self.assertEqual(tree.DeleteNodeByKey(2), True)
        self.assertEqual(tree.Root.LeftChild.NodeValue, 4)
        self.assertEqual(tree.Root.LeftChild.LeftChild, None)
        self.assertEqual(tree.Root.LeftChild.RightChild, None)
        self.assertFalse(tree.FindNodeByKey(2).NodeHasKey)

    def test_del_root_without_right(self):
        tree = BST(None)
        Child_1 = (10, 10)
        Child_2 = (4, 4)
        Child_3 = (2, 2)
        tree.AddKeyValue(Child_1[0], Child_1[1])
        tree.AddKeyValue(Child_2[0], Child_2[1])
        tree.AddKeyValue(Child_3[0], Child_3[1])
        self.assertEqual(tree.DeleteNodeByKey(10), True)
        self.assertEqual(tree.Root.NodeValue, 4)
        self.assertEqual(tree.Root.LeftChild.NodeValue, 2)
        self.assertEqual(tree.Root.RightChild, None)
        self.assertFalse(tree.FindNodeByKey(10).NodeHasKey)

    def test_left_right(self):
        tree = BST(None)
        Child_1 = (20, 20)
        Child_2 = (10, 10)
        Child_3 = (7, 7)
        Child_4 = (16, 16)
        Child_5 = (14, 14)
        Child_6 = (12, 12)
        Child_7 = (18, 18)
        Child_8 = (15, 15)
        Child_9 = (13, 13)
        Child_10 = (35, 35)
        tree.AddKeyValue(Child_1[0], Child_1[1])
        tree.AddKeyValue(Child_2[0], Child_2[1])
        tree.AddKeyValue(Child_3[0], Child_3[1])
        tree.AddKeyValue(Child_4[0], Child_4[1])
        tree.AddKeyValue(Child_5[0], Child_5[1])
        tree.AddKeyValue(Child_6[0], Child_6[1])
        tree.AddKeyValue(Child_7[0], Child_7[1])
        tree.AddKeyValue(Child_8[0], Child_8[1])
        tree.AddKeyValue(Child_9[0], Child_9[1])
        tree.AddKeyValue(Child_10[0], Child_10[1])
        self.assertEqual(tree.DeleteNodeByKey(10), True)
        self.assertEqual(tree.Root.LeftChild.NodeValue, 12)
        self.assertEqual(tree.Root.LeftChild.RightChild.LeftChild.LeftChild.NodeValue, 13)
        self.assertEqual(tree.Root.LeftChild.RightChild.LeftChild.LeftChild.LeftChild, None)
        self.assertEqual(tree.Root.LeftChild.RightChild.LeftChild.LeftChild.RightChild, None)
        self.assertEqual(tree.Root.NodeValue, 20)
        self.assertEqual(tree.Root.RightChild.NodeValue, 35)
        self.assertFalse(tree.FindNodeByKey(10).NodeHasKey)

    def test_left_right_2(self):
        tree = BST(None)
        Child_1 = (20, 20)
        Child_2 = (10, 10)
        Child_3 = (7, 7)
        Child_4 = (16, 16)
        tree.AddKeyValue(Child_1[0], Child_1[1])
        tree.AddKeyValue(Child_2[0], Child_2[1])
        tree.AddKeyValue(Child_3[0], Child_3[1])
        tree.AddKeyValue(Child_4[0], Child_4[1])
        self.assertEqual(tree.DeleteNodeByKey(10), True)
        self.assertEqual(tree.Root.LeftChild.NodeValue, 16)
        self.assertEqual(tree.Root.LeftChild.RightChild, None)
        self.assertEqual(tree.Root.LeftChild.LeftChild.NodeValue, 7)
        self.assertEqual(tree.Root.NodeValue, 20)
        self.assertFalse(tree.FindNodeByKey(10).NodeHasKey)

    def test_left_right_3(self):
        tree = BST(None)
        Child_1 = (20, 20)
        Child_2 = (10, 10)
        Child_3 = (7, 7)
        Child_4 = (16, 16)
        Child_5 = (18, 18)
        tree.AddKeyValue(Child_1[0], Child_1[1])
        tree.AddKeyValue(Child_2[0], Child_2[1])
        tree.AddKeyValue(Child_3[0], Child_3[1])
        tree.AddKeyValue(Child_4[0], Child_4[1])
        tree.AddKeyValue(Child_5[0], Child_5[1])
        self.assertEqual(tree.DeleteNodeByKey(10), True)
        self.assertEqual(tree.Root.LeftChild.NodeValue, 16)
        self.assertEqual(tree.Root.LeftChild.RightChild.NodeValue, 18)
        self.assertEqual(tree.Root.LeftChild.LeftChild.NodeValue, 7)
        self.assertEqual(tree.Root.NodeValue, 20)
        self.assertFalse(tree.FindNodeByKey(10).NodeHasKey)

    def test_left_right_4(self):
        tree = BST(None)
        Child_1 = (20, 20)
        Child_2 = (10, 10)
        Child_3 = (7, 7)
        Child_4 = (16, 16)
        Child_5 = (18, 18)
        tree.AddKeyValue(Child_1[0], Child_1[1])
        tree.AddKeyValue(Child_2[0], Child_2[1])
        tree.AddKeyValue(Child_3[0], Child_3[1])
        tree.AddKeyValue(Child_4[0], Child_4[1])
        tree.AddKeyValue(Child_5[0], Child_5[1])
        self.assertEqual(tree.DeleteNodeByKey(10), True)
        self.assertEqual(tree.Root.LeftChild.NodeValue, 16)
        self.assertEqual(tree.Root.LeftChild.RightChild.NodeValue, 18)
        self.assertEqual(tree.Root.LeftChild.LeftChild.NodeValue, 7)
        self.assertEqual(tree.Root.NodeValue, 20)
        self.assertFalse(tree.FindNodeByKey(10).NodeHasKey)
        self.assertEqual(tree.DeleteNodeByKey(7), True)
        self.assertEqual(tree.Root.LeftChild.NodeValue, 16)
        self.assertEqual(tree.Root.LeftChild.RightChild.NodeValue, 18)
        self.assertEqual(tree.Root.LeftChild.LeftChild, None)
        self.assertEqual(tree.Root.NodeValue, 20)
        self.assertEqual(tree.DeleteNodeByKey(20), True)
        self.assertEqual(tree.Root.LeftChild, None)
        self.assertEqual(tree.Root.RightChild.NodeValue, 18)
        self.assertEqual(tree.Root.NodeValue, 16)
        self.assertEqual(tree.DeleteNodeByKey(18), True)
        self.assertEqual(tree.Root.LeftChild, None)
        self.assertEqual(tree.Root.RightChild, None)
        self.assertEqual(tree.Root.NodeValue, 16)
        self.assertEqual(tree.DeleteNodeByKey(16), True)
        self.assertEqual(tree.Count(), 0)
        self.assertEqual(tree.Root, None)


if __name__ == '__main__':
    unittest.main()
