# ATD Linked List
class LinkedList:
    STATUS_LIST_EMPTY = 0  # LinkedList пустой
    STATUS_LIST_ОК = 1  # LinkedList не пустой, курсор установлен на какое либо значение
    STATUS_NODE_FIND_ERR = 0  # узел с искомым значением справа не существует
    STATUS_NODE_FIND_ОК = 1  # узел с искомым значением справа существует
    STATUS_NODE_LEFT_ERR = 0  # узел слева не существует
    STATUS_NODE_LEFT_ОК = 1  # узел слева существует
    STATUS_NODE_RIGHT_ERR = 0  # узел справа не существует
    STATUS_NODE_RIGHT_ОК = 1  # узел справа существует
    STATUS_HEAD_ERR = 0  # курсор не установлен на первый узел
    STATUS_HEAD_ОК = 1  # курсор установлен на первый узел
    STATUS_TAIL_ERR = 0  # курсор не установлен на последний узел
    STATUS_TAIL_ОК = 1  # курсор установлен на последний узел

    # конструктор
    # постусловие: создан новый пустой Linked List
    def __init__(self):
        self.head  # первый узел
        self.next  # последний узел
        self.cursor  # статус курсора

    # команды:
    # предусловие: список не пустой.
    # постусловие: курсор указывает на первый узел в списке.
    def head(self):  # установить курсор на первый узел в списке.
        pass

    # предусловие: список не пустой.
    # постусловие: курсор указывает на последний узел в списке.
    def tail(self):  # установить курсор на последний узел в списке.
        pass

    # предусловие: курсор указывает не на последний узел в списке.
    # постусловие: курсор указывает на узел, который находится справа от текущего.
    def right(self):  # сдвинуть курсор на один узел вправо.
        pass

    # предусловие: курсор указывает на любой узел в списке.
    # постусловие: справа от текущего вставлен новый узел с заданным значением, курсор остался на месте.
    def put_right(self, value):  # вставить следом за текущим узлом новый узел с заданным значением.
        pass

    # предусловие: курсор указывает на любой узел в списке.
    # постусловие: слева от текущего вставлен новый узел с заданным значением, курсор остался на месте.
    def put_left(self, value):  # вставить перед текущим узлом новый узел с заданным значением.
        pass

    # предусловие: курсор указывает на любой узел в списке.
    # постусловие: текущий узел удален.
    # курсор сместился к узлу справа, если он есть.
    # в противном случае курсор сместился к узлу слева.
    def remove(self):  # удалить текущий узел.
        pass

    # постусловие: из списка удалены все узлы.
    def clear(self):  # очистить список.
        pass

    # постусловие: узел с новым значением добавлен в конец списка.
    def add_tail(self, value):  # добавить новый узел в хвост списка.
        pass

    # предусловие: курсор указывает на любой узел в списке.
    # постусловие: значение текущего узла заменено на заданное, курсор остался на месте.
    def replace(self, value):  # заменить значение текущего узла на заданное.
        pass

    # предусловие: курсор указывает на любое значение в списке, искомое значение существует в списке справа от курсора.
    # постусловие: курсор указывает на следующий узел с искомым значением.
    def find(self, value):  # установить курсор на следующий узел с искомым значением(по отношению к текущему узлу).
        pass

    # постусловие: из списка удалены все узлы с искомым значением.
    def remove_all(self, value):  # удалить в списке все узлы с заданным значением.
        pass

    # запросы:
    # предусловие: курсор указывает на любой узел в списке.
    def get(self):  # получить значение текущего узла.
        pass

    def size(self):  # посчитать количество узлов в списке
        pass

    # дополнительные запросы:
    def get_node_find_status(self):  # возвращает значение node_find*
        pass

    def is_right_node(self):  # существует ли узел справа?
        pass

    def is_left_node(self):  # существует ли узел слева?
        pass

    def is_head(self):  # находится ли курсор в начале списка?
        pass

    def is_tail(self):  # находится ли курсор в конце списка?
        pass

    def is_value(self):  # установлен ли курсор на какой - либо узел в списке (по сути, непустой ли список).
        pass


# в классе LinkedList упоминаются узлы, поэтому добавила к описанию класс Node.
class Node:
    # конструктор
    # постусловие: создан новый узел с заданным значением
    def __init__(self):
        self.value  # значение
        self.next  # ссылка на следующий узел
