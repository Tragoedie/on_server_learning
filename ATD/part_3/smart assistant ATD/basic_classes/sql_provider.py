class SQLProvider:
    # константы
    DB_STATUS_NULL = -1  # запрос не вернул строк
    DB_STATUS_ERROR = 0  # запрос отработал некорректно (ошибка)
    DB_STATUS_OK = 1  # запрос отработал корректно (вернул строки)
    CREATE_DB_STATUS_NIL = -1  # базы данных не существует
    CREATE_DB_STATUS_ERROR = 0  # сздание базы данных и таблиц завершено с ошибкой
    CREATE_DB_STATUS_OK = 1  # база данных создана успешко

    # конструктор:
    # постусловие: установлено соединение с базой данных.
    def __init__(self):
        pass

    # команды:
    # cоздание базы данных.
    # предусловие: база данных не существует.
    # постусловие: создана база данных с таблицами.
    def create_db(self):
        pass

    # запросы:
    # получение будильников.
    # предусловие: таблица будильников существует.
    # постусловие: получен массив будильников.
    def get_alarms(self):
        pass

    # получение ближайшего будильника.
    # предусловие: таблица будильников существует.
    # постусловие: получен ближайший будильник.
    def get_last_alarm(self):
        pass

    #  получение дат напоминаний за месяц.
    #  предусловие: таблица напоминаний существует, год >= 2022, 0 < месяц < 13.
    #  постусловие: получен массив дат напоминаний за выбранный месяц.
    def get_month_reminders(self, month: int, year: int):
        pass

    #  получение дат напоминаний за год.
    #  предусловие: таблица напоминаний существует, год >= 2022.
    #  постусловие: получен массив дат напоминаний за выбранный год.
    def get_year_reminders(self, year: int):
        pass

    #  получение текста напоминания.
    #  предусловие: таблица напоминаний существует, id > 0.
    #  постусловие: получено выбранное напоминание.
    def get_reminder(self):
        pass

    # получение списка заметок.
    # предусловие: таблица заметок существует.
    # постусловие: получены заметки.
    def get_all_notes(self):
        pass

    # получение списка заметок по заданной категории.
    # предусловие: таблица заметок существует.
    # постусловие: получены заметки.
    def get_category_notes(self):
        pass

    # получение текста заметки.
    # предусловие: таблица заметок существует.
    # постусловие: получен текст заметки.
    def get_note(self):
        pass
